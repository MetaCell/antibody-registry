# Generated by Django 4.1.4 on 2023-05-08 08:07

import api.models
import django.contrib.postgres.indexes
import django.contrib.postgres.search
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Antibody",
            fields=[
                (
                    "ix",
                    models.AutoField(primary_key=True, serialize=False, unique=True),
                ),
                (
                    "ab_name",
                    models.CharField(
                        blank=True, db_index=True, max_length=512, null=True
                    ),
                ),
                ("ab_id", models.CharField(db_index=True, max_length=32, null=True)),
                ("accession", models.CharField(blank=True, max_length=32, null=True)),
                (
                    "commercial_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("commercial", "commercial"),
                            ("personal", "personal"),
                            ("non-profit", "non-profit"),
                            ("other", "other"),
                        ],
                        default="other",
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "uid",
                    models.CharField(
                        blank=True, db_index=True, max_length=256, null=True
                    ),
                ),
                ("uid_legacy", models.IntegerField(blank=True, null=True)),
                (
                    "catalog_num",
                    models.CharField(
                        blank=True, db_index=True, max_length=256, null=True
                    ),
                ),
                (
                    "catalog_num_search",
                    models.CharField(
                        blank=True, db_index=True, max_length=256, null=True
                    ),
                ),
                (
                    "cat_alt",
                    models.CharField(
                        blank=True, db_index=True, max_length=512, null=True
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        blank=True, db_index=True, max_length=2048, null=True
                    ),
                ),
                (
                    "ab_target",
                    models.CharField(
                        db_column="ab_target", db_index=True, max_length=1024, null=True
                    ),
                ),
                (
                    "entrez_id",
                    models.CharField(
                        blank=True,
                        db_column="ab_target_entrez_gid",
                        db_index=True,
                        max_length=2048,
                        null=True,
                    ),
                ),
                (
                    "uniprot_id",
                    models.CharField(
                        blank=True, db_index=True, max_length=64, null=True
                    ),
                ),
                (
                    "target_species_raw",
                    models.CharField(
                        blank=True,
                        help_text="Comma separated value for target species. Values filled here will be parsed and assigned to the 'Target species' field.",
                        max_length=4096,
                        null=True,
                        verbose_name="Target species (csv)",
                    ),
                ),
                (
                    "subregion",
                    models.CharField(
                        blank=True,
                        db_column="target_subregion",
                        db_index=True,
                        max_length=256,
                        null=True,
                    ),
                ),
                (
                    "modifications",
                    models.CharField(
                        blank=True,
                        db_column="target_modification",
                        db_index=True,
                        max_length=128,
                        null=True,
                    ),
                ),
                (
                    "epitope",
                    models.CharField(
                        blank=True, db_index=True, max_length=1024, null=True
                    ),
                ),
                (
                    "clonality",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("unknown", "Unknown"),
                            ("cocktail", "Cocktail"),
                            ("control", "Control"),
                            ("isotype control", "Isotype Control"),
                            ("monoclonal", "Monoclonal"),
                            ("monoclonal secondary", "Monoclonal Secondary"),
                            ("polyclonal", "Polyclonal"),
                            ("polyclonal secondary", "Polyclonal Secondary"),
                            ("oligoclonal", "Oligoclonal"),
                            ("recombinant", "Recombinant"),
                            ("recombinant monoclonal", "Recombinant Monoclonal"),
                            (
                                "recombinant monoclonal secondary",
                                "Recombinant Monoclonal Secondary",
                            ),
                            ("recombinant polyclonal", "Recombinant Polyclonal"),
                            (
                                "recombinant polyclonal secondary",
                                "Recombinant Polyclonal Secondary",
                            ),
                        ],
                        db_index=True,
                        default="unknown",
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "clone_id",
                    models.CharField(
                        blank=True, db_index=True, max_length=256, null=True
                    ),
                ),
                (
                    "product_isotype",
                    models.CharField(
                        blank=True, db_index=True, max_length=256, null=True
                    ),
                ),
                (
                    "product_conjugate",
                    models.CharField(
                        blank=True, db_index=True, max_length=512, null=True
                    ),
                ),
                (
                    "defining_citation",
                    models.CharField(blank=True, max_length=16384, null=True),
                ),
                (
                    "product_form",
                    models.CharField(
                        blank=True, db_index=True, max_length=1024, null=True
                    ),
                ),
                ("comments", models.TextField(blank=True, null=True)),
                (
                    "kit_contents",
                    models.TextField(blank=True, db_index=True, null=True),
                ),
                ("feedback", models.TextField(blank=True, db_index=True, null=True)),
                (
                    "curator_comment",
                    models.TextField(blank=True, db_index=True, null=True),
                ),
                (
                    "disc_date",
                    models.CharField(
                        blank=True, db_index=True, max_length=128, null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("CURATED", "Curated"),
                            ("REJECTED", "Rejected"),
                            ("QUEUE", "Queued"),
                        ],
                        db_index=True,
                        default="QUEUE",
                        max_length=8,
                    ),
                ),
                (
                    "insert_time",
                    models.DateTimeField(auto_now_add=True, db_index=True, null=True),
                ),
                (
                    "lastedit_time",
                    models.DateTimeField(auto_now=True, db_index=True, null=True),
                ),
                (
                    "curate_time",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                ("show_link", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "verbose_name_plural": "antibodies",
            },
        ),
        migrations.CreateModel(
            name="AntibodyApplications",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AntibodyFiles",
            fields=[
                (
                    "id",
                    models.AutoField(primary_key=True, serialize=False, unique=True),
                ),
                ("type", models.CharField(default="mds", max_length=32, null=True)),
                (
                    "file",
                    models.FileField(
                        upload_to=api.models.antibody_persistence_directory
                    ),
                ),
                ("display_name", models.CharField(max_length=256)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("uploader_uid", models.CharField(max_length=256)),
                ("filehash", models.CharField(max_length=32)),
            ],
            options={
                "verbose_name_plural": "Antibody files",
            },
        ),
        migrations.CreateModel(
            name="AntibodySearch",
            fields=[
                ("ix", models.BigIntegerField(primary_key=True, serialize=False)),
                (
                    "search_vector",
                    django.contrib.postgres.search.SearchVectorField(null=True),
                ),
                ("defining_citation", models.CharField(max_length=16384, null=True)),
                ("disc_date", models.CharField(max_length=128, null=True)),
                ("status", models.CharField(db_index=True, max_length=8, null=True)),
            ],
            options={
                "db_table": "antibody_search",
            },
        ),
        migrations.CreateModel(
            name="AntibodySpecies",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Antigen",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "symbol",
                    models.CharField(
                        db_column="ab_target", db_index=True, max_length=1024, null=True
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Application",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="Specie",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=4096, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="Vendor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(db_column="vendor", db_index=True, max_length=512),
                ),
                (
                    "nif_id",
                    models.CharField(
                        blank=True, db_column="nif_id", max_length=32, null=True
                    ),
                ),
                (
                    "eu_id",
                    models.CharField(
                        blank=True, db_column="euid", max_length=255, null=True
                    ),
                ),
                (
                    "commercial_type",
                    models.CharField(
                        choices=[
                            ("commercial", "commercial"),
                            ("personal", "personal"),
                            ("non-profit", "non-profit"),
                            ("other", "other"),
                        ],
                        default="other",
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "show_link",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
            ],
            options={
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="VendorSynonym",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=512)),
                (
                    "vendor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.vendor"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="VendorDomain",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "base_url",
                    models.URLField(
                        db_column="domain_name",
                        db_index=True,
                        max_length=2048,
                        null=True,
                    ),
                ),
                (
                    "is_domain_visible",
                    models.BooleanField(db_column="link", default=True),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("CURATED", "Curated"),
                            ("REJECTED", "Rejected"),
                            ("QUEUE", "Queued"),
                        ],
                        db_index=True,
                        default="QUEUE",
                        max_length=8,
                    ),
                ),
                (
                    "vendor",
                    models.ForeignKey(
                        db_column="vendor_id",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.vendor",
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="vendor",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.search.SearchVector("name", config="english"),
                name="vendor_name_fts_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="specie",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.search.SearchVector("name", config="english"),
                name="specie_name_fts_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="application",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.search.SearchVector("name", config="english"),
                name="application_name_fts_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="antigen",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.search.SearchVector("symbol", config="english"),
                name="gene_symbol_fts_idx",
            ),
        ),
        migrations.AddField(
            model_name="antibodyspecies",
            name="antibody",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.antibody"
            ),
        ),
        migrations.AddField(
            model_name="antibodyspecies",
            name="specie",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.specie"
            ),
        ),

        migrations.AddField(
            model_name="antibodyfiles",
            name="antibody",
            field=models.ForeignKey(
                db_column="ab_ix",
                on_delete=django.db.models.deletion.CASCADE,
                to="api.antibody",
            ),
        ),
        migrations.AddField(
            model_name="antibodyapplications",
            name="antibody",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.antibody"
            ),
        ),
        migrations.AddField(
            model_name="antibodyapplications",
            name="application",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.application"
            ),
        ),
        migrations.AddField(
            model_name="antibody",
            name="antigen",
            field=models.ForeignKey(
                blank=True,
                db_column="antigen_id",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="api.antigen",
            ),
        ),
        migrations.AddField(
            model_name="antibody",
            name="applications",
            field=models.ManyToManyField(
                blank=True, through="api.AntibodyApplications", to="api.application"
            ),
        ),
        migrations.AddField(
            model_name="antibody",
            name="source_organism",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="source",
                to="api.specie",
            ),
        ),
        migrations.AddField(
            model_name="antibody",
            name="species",
            field=models.ManyToManyField(
                blank=True,
                db_column="target_species",
                related_name="targets",
                through="api.AntibodySpecies",
                to="api.specie",
                verbose_name="Target species",
            ),
        ),
        migrations.AddField(
            model_name="antibody",
            name="vendor",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="api.vendor",
            ),
        ),
        migrations.AddIndex(
            model_name="antibody",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.search.SearchVector(
                    "catalog_num_search", config="simple"
                ),
                name="antibody_catalog_num_fts_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="antibody",
            index=models.Index(fields=["-disc_date"], name="antibody_discontinued_idx"),
        ),
        migrations.AddConstraint(
            model_name="antibody",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("status", "curated"), _negated=True),
                    models.Q(
                        ("status", "curated"),
                        ("catalog_num__isnull", False),
                        ("ab_name__isnull", False),
                        ("ab_name__exact", ""),
                        ("vendor__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="curated_constraints",
            ),
        ),
        migrations.RunSQL(
            sql="""
            DROP TABLE IF EXISTS antibody_search;
            CREATE MATERIALIZED VIEW antibody_search AS 
            SELECT ix, 
            (
                setweight(to_tsvector('english'::regconfig, (((
                COALESCE(ab_name, ''::text) || ' '::text) || 
                        COALESCE(clone_id, ''::text) || ' '::text)) 
            ), 'A'::"char") ||
                
                setweight(to_tsvector('english'::regconfig, (((((((((((((((
                    COALESCE(api_vendor.vendor, ''::text) || ' '::text) || 
                    COALESCE(api_specie.name, ''::text) || ' '::text) || 
                    COALESCE(target_subregion, ''::text) || ' '::text) || 
                        COALESCE(clonality, ''::text)) || ' '::text) || 
                    COALESCE(target_modification, ''::text)) || ' '::text) || 
                    COALESCE(epitope, ''::character varying)::text) || ' '::text) || 
                    COALESCE(product_isotype, ''::character varying)::text) || ' '::text) || 
                COALESCE(product_conjugate, ''::text) || 
                COALESCE(product_form, ''::character varying)::text) || ' '::text) || 
                COALESCE(kit_contents, ''::character varying)::text) || ' '::text)), 'C'::"char") ||
            setweight(to_tsvector('english'::regconfig, (((
                COALESCE(comments, ''::text) || ' '::text) || 
                        COALESCE(curator_comment, ''::text) || ' '::text)) 
            ), 'D'::"char")

            ) AS search_vector,
            defining_citation,
            disc_date,
            status
            FROM api_antibody 
            LEFT JOIN api_vendor ON api_vendor.id = api_antibody.vendor_id
            LEFT JOIN api_specie ON api_specie.id = api_antibody.source_organism_id
            """,
            reverse_sql = '''
            DROP MATERIALIZED VIEW antibody_search;
            '''
        ),
        migrations.RunSQL(
            sql="""CREATE UNIQUE INDEX IF NOT EXISTS antibody_search_idx
                    ON antibody_search
                    (ix);
                    """,
        ),
        migrations.AddIndex(
            model_name="antibodysearch",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_vector"], name="antibody_search_fts_idx"
            ),
        ),
        migrations.RunSQL("""
        create or replace function refresh_mat_view()
        returns trigger language plpgsql
        as $$
        begin
            refresh  materialized view concurrently antibody_search ;
            return null;
        end $$;

        create trigger refresh_mat_view
        after insert or update or delete or truncate
        on api_vendor for each statement 
        execute procedure refresh_mat_view();

        create trigger refresh_mat_view
        after insert or update or delete or truncate
        on api_antibody for each statement 
        execute procedure refresh_mat_view();

        create trigger refresh_mat_view
        after insert or update or delete or truncate
        on api_specie for each statement 
        execute procedure refresh_mat_view();
        """)
    ]
