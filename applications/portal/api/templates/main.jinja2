from __future__ import annotations

import os

from fastapi import APIRouter, Depends, FastAPI, HTTPException, Request
from fastapi.security import APIKeyCookie, HTTPBasicCredentials, HTTPBearer

from django.conf import settings
from django.apps import apps
from django.core.asgi import get_asgi_application

from starlette.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles

{{imports | replace(".","openapi.")}}

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "portal.settings")
apps.populate(settings.INSTALLED_APPS)

# migrate the Django models
os.system("python manage.py migrate")

from cloudharness.auth import decode_token

from api.controllers import *

app = FastAPI(
    {% if info %}
    {% for key,value in info.items() %}
    {% if key != 'servers' %}
    {{ key }} = {% if value is string %}"{{ value }}"{% else %}{{ value }}{% endif %},
    {% endif %}
    {% endfor %}
    {% endif %}
    debug=settings.DEBUG
    )

{% if info %}
{% for key,value in info.items() %}
{% if key == 'servers' %}
prefix_router = APIRouter(prefix="{{value[0].url}}")
{% endif %}
{% endfor %}
{% endif %}

app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_HOSTS or ["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

from cloudharness.middleware import set_authentication_token, get_authentication_token # noqa E402

@app.middleware("http")
async def add_process_time_header(request: Request, call_next):
    # retrieve the bearer token from the header
    # and save it for use in the AuthClient
    authorization = request.headers.get('Authorization') or request.cookies.get('kc-access')
    if authorization:
        if "Bearer" in authorization:
            authorization = authorization.split("Bearer ")[1]
        set_authentication_token(authorization)
    return await call_next(request)
    
if os.environ.get('KUBERNETES_SERVICE_HOST', None):
    # init the auth service when running in/for k8s
    import threading 
    from cloudharness_django.services import get_auth_service, init_services # noqa E402
    from cloudharness import log # noqa E402
    import time
    def start_auth_service():
        try:
            init_services()
        except:
            log.exception("Error initializing services. Retrying in 5 seconds...")
            time.sleep(5)
            start_auth_service()

    threading.Thread(target=start_auth_service).start()
    # start the kafka event listener when running in/for k8s
    def start_event_listener():
        try:
            import cloudharness_django.services.events
            log.info("User sync events listener started")
        except:
            log.exception("Error initializing event queue. Retrying in 5 seconds...")
            time.sleep(5)
            start_event_listener()
    threading.Thread(target=start_event_listener).start()


# enable the Bearer Authentication
# security = APIKeyCookie(name="kc-access") # This works but having issues with dev server
# security = HTTPBearer()

async def has_access():
    """
    Function that is used to validate the token in the case that it requires it
    """
    if not os.environ.get('KUBERNETES_SERVICE_HOST', None):
        return {}
    token = get_authentication_token()

    try:
        payload = decode_token(token)
    except Exception as e:  # catches any exception
        raise HTTPException(
            status_code=401,
        )
    

PROTECTED = [Depends(has_access)]

# Operations

{% for operation in operations %}
@prefix_router.{{operation.type}}('{{operation.snake_case_path}}', response_model={{operation.response}}, tags={{operation["tags"]}}{% if operation.security %}, dependencies=PROTECTED{% endif %})
def {{operation.function_name}}({{operation.snake_case_arguments}}) -> {{operation.response}}:
    {%- if operation.summary %}
    """
    {{ operation.summary }}
    """
    {%- endif %}
    {% if operation["tags"] -%}
    return {{operation["tags"][0]}}_controller.{{operation.function_name}}(
    {% else %}
    return api_controller.{{operation.function_name}}(
    {% endif %}
    {% for params in operation.snake_case_arguments.split(",") -%}
    {% if params and ':' in params %}
        {{params.split(":")[0]}}={{params.split(":")[0]}},
    {% endif %}
    {% endfor -%})
{% endfor %}


app.include_router(prefix_router)

app.mount("/static", StaticFiles(directory=settings.STATIC_ROOT), name="static")
app.mount("/media", StaticFiles(directory=settings.MEDIA_ROOT), name="media")
app.mount("/", get_asgi_application())

#if __name__ == "__main__":
#    import uvicorn
#    uvicorn.run(app, host="0.0.0.0", port=8000)

from api.helpers import init_sentry # noqa E402

init_sentry()
